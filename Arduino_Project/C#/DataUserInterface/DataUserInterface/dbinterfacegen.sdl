// The name of the .csproj file.
csproj "DataUserInterface.csproj"

// The folder (relative to this file) that contains the EF model.
modelFolder "../../DataManager/DataManager/Generated/Model"

// The default namespace for all generated files.
defaultNamespace "DataUserInterface"

// The namespace (appended onto defaultNamespace) for the generated ISearchProviders
searchProviderNamespace "SearchProviders"

// The namespace for the generated editors
editorNamespace "Editors"

// The namespace for the generate window that displays the MainInterface
interfaceWindowNamespace "Windows"

// A priority list of variable names. The variable with the highest priority in a class will be used as the display name for it.
// If no display name in this list could be found, then the primary key is used instead.
displayNames {
    "description"   1
    "title"         1
}

// A list of variable names to display as a column in search grids.
// The primary key is always on there.
columnVariables {
    "name"
    "description"
}

// A list of variable names to not generate interface components for.
ignoreVariables {
    "*id" // Foreign keys end in 'id'
    "timestamp"
    "version"
}

// Each editor control generated for a variable has a label attached to it.
// The text in this label is simply the name of the variable the control is for.
// There are likely cases however, where instead of the label saying "is_active:"
// you'd rather have it say "Active?:", "Is Active?:", etc.
//
// There are two values per override, in this format (sans square brackets):
//      "[object_type]:[variable_name]" "[new text for label]"
//
// For example, imagine EF generated a class called 'tbl_device', and it had a variable
// called 'device2', but we'd want that to be displayed as "Parent Device":
//      "tbl_device:device2" "Parent Device"
//
// As a side note, the "[object_type]" part is a glob pattern string, so a single override
// can be written for multiple different classes.
labelTextOverrides {
    "device:device2" "Parent Device"
    "*:device_type"  "Type"
}