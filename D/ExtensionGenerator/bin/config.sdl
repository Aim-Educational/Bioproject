// IMPORTANT: For relative paths, do not start the path with a slash, otherwise the slash gets translated to the root drive
//            ... at least on Windows it does.

// Config for the DataManager project.
projDataManager {
    // The root directory for the project (contains the .csproj file)
    // Must be an absolute path.
    rootDir `D:\Coding\D\For Fun\Bioproject\C#\DataManager\DataManager`

    // The path (relative to the rootDir) to the directory containing all of the files
    // that EF generated for the database's model.
    efModelDir "Generated/Model"

    // The path (relative to the rootDir) to the directory where the generator should output
    // it's files. Note that everything the generator outputs will be put into subdirectories.
    generatorOutputDir "Generated/"

    // A list of variables names that _every_ object in the EF model must contain.
    mandatoryVariables {
        "version"
        "is_active"
        "timestamp"
    }
}

// Config for the DataUserInterface project.
projUserInterface {
    // The root directory for the project (contains the .csproj file)
    // Must be an absolute path.
    rootDir `D:\Coding\D\For Fun\Bioproject\C#\DataUserInterface\DataUserInterface`

    // The path (relative to the rootDir) to the directory where the generator should output
    // the extension code for the SearchForm class.
    searchExtensionOutputDir "Generated/"

    // The name to give the search form extension file.
    searchExtensionFilename "SearchForm.cs"

    // The relative path to the directory where the generator should output
    // the editor forms.
    formOutputDir "Generated/"

    // Some objects in the database (and therefor created by EF) will have a foreign key to an object in another/the same table.
    // When this happens, the generator will create a drop down list so that the user can select which object from that table they want.
    // However, the generator doesn't know what to display in the drop down list (it's name, description, id, etc.) so it needs to be given a list
    // of variable names, that are also given a priority.
    // For example, imagine an EF class called 'device', which has the 'id', 'name', and 'description' variables.
    // Our priority list could be setup so that the 'name' variable takes the highest priority, which means the drop down list will display
    // the names of each device.
    // Another example is a 'backup_log' class, which only has the 'id' and 'filepath' variables. In this case, we could have add the
    // 'filepath' name into this list, with any priority, and the generator will populate the drop down with the filepaths of all the backup logs.
    //
    // There are also other places in the generator will use this priority list, such as to decide which variable to display in the search form results.
    objectListVariablePriority {
        "name"              3
        "description"       2
        "comment"           1
    }

    // Some objects may have variables that the user has no need to see, so any variables that have a name from this list
    // will simply be ignored when generating the editor forms.
    variablesToIgnore {
        "version"
        "is_active"
        "timestamp"
    }

    // Whenever a control/set of controls are generated in an editor form for an object's variable (so you can edit/view it),
    // the generator will also place a label next to the control so the user knows what the data is.
    // In all but one case (primary keys, which gets set to 'ID'), the text of this label is simply the standardised name of the variable that the control is for.
    // This is sometimes undesirable however, and a more specific name might be desired, so this list is used to provide that option.
    labelTextOverrides {
        "device.device2"    "Parent Device"
    }
}

// Various debug options for development.
debugOptions {
    // Whether or not the 'scriptlike' library should echo it's actions to the console.
    echo false

    // Whether the generator will actually create files/directories or not. (false = It will, true = It won't)
    dryRun false
}

// Classes generated by EF may have names such as "device_type", "group_type", etc.
// The generator converts all of these names into a standardised format, so "device_type" -> "DeviceType" for example.
// Certain words however, such as "url" and "bbc" would result in the standard name look like "BbcUrlRssFeed"
// Where the acronyms aren't fully capitalised.
// This list is basically a list of words to fully capitalise when making the standard names, so if "bbc", "url" and "rss" were
// all added, then "BbcUrlRssFeed" would become "BBCURLRSSFeed" (Clearly a poor example though)
// (p.s. I don't actually know why we do this, but we do)
wordsToCapitalise {
    "bbc"
    "rss"
    "url"
}